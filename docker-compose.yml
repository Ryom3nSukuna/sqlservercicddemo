version: "3.9"
services:
  flask-app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: "flask-${FLASK_ENV}"
    ports:
      - "${APP_PORT}:5000"
    environment:
      FLASK_ENV: "${FLASK_ENV}"
      APP_PORT: "${APP_PORT}"
      SQL_SERVER: "${SQL_SERVER}"
      DATABASE: "${DATABASE}"      # Add DATABASE
      DBUID: "${DBUID}"      # Add USERNAME
      DBPWD: "${DBPWD}"      # Add PASSWORD
      COMPOSE_PROJECT_NAME: "${FLASK_ENV}_project"  # Dynamically set project name
    depends_on:
      sqlserver:  # Wait for the SQL Server container to start
        condition: service_healthy  # Wait for SQL Server health check to pass
    volumes:
      - ${FLASK_ENV}_init_status:/var/shared  # Mount the shared volume to Flask container
      - ./backend:/app  # Mount your local backend folder to /app in the container
    networks:
      - "${FLASK_ENV}-net"

  sqlserver:
    build:
      context: .
      dockerfile: Dockerfile.sqlserver  # Custom Dockerfile for SQL Server
    container_name: "${SQL_SERVER}"  # Use environment-specific container name
    environment:
      DB_NAME: "${DATABASE}"
      DB_UID: "${DBUID}"
      SPRINT_FOLDER: "${SPRINT_FOLDER}"
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DBPWD}"
      COMPOSE_PROJECT_NAME: "${FLASK_ENV}_project"  # Dynamically set project name
      INIT_SQL_FILE: "/docker-entrypoint-initdb.d/${FLASK_ENV}/init.sql"
    ports:
      - "${SQL_PORT}:1433"
    volumes:
      - ./scripts:/docker-entrypoint-initdb.d:ro  # Mount init scripts as read-only
      - ./run-sqlserver.sh:/usr/bin/run-sqlserver.sh:ro  # Mount the script into the container
      - ${FLASK_ENV}_init_status:/var/shared  # Mount the shared volume to SQL Server container
      - ${SQL_SERVER}_data:/var/opt/mssql  # Environment-specific data volume
      - ./db:/var/opt/sqlserver/db:ro  # Mount the db folder to the container
      - ./logs:/var/log/sqlscripts:rw
    networks:
      - "${FLASK_ENV}-net"
    command: >
        /bin/bash -c "
        /usr/bin/run-sqlserver.sh 2>&1 | tee /var/log/run-sqlserver.log
        "
    healthcheck:
      test: [
        "CMD-SHELL",
        "test -f /var/shared/init_completed.txt && ACCEPT_EULA=Y /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${DBPWD} -Q 'SELECT 1'"
      ]
      interval: 100s
      timeout: 5s
      retries: 5

volumes:
  dev_init_status:
    name: dev_init_status  # Explicitly define volume name
  qa_init_status:
    name: qa_init_status
  dev_sqlserver_data:
    name: dev_sqlserver_data
  qa_sqlserver_data:
    name: qa_sqlserver_data

networks:
  dev-net:
    name: dev-net
    driver: bridge
  qa-net:
    name: qa-net
    driver: bridge
  prod-net:
    name: prod-net
    driver: bridge
