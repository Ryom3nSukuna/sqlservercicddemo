name: CI/CD Pipeline for SQL Server
# added secrets proper
on:
  push:
    branches:
      - develop
      - feature/*
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # For manual rollback triggers

jobs:
  ci_dev:
    name: Continuous Integration for Dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Extract Sprint Folder from Branch Name
        id: sprint
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          SPRINT_FOLDER=$(echo $BRANCH_NAME | sed 's/feature\///')
          echo "SPRINT_FOLDER=$SPRINT_FOLDER" >> $GITHUB_ENV

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Generate .env.dev for Docker Compose
        run: |
            echo "SQL_SERVER=${{ secrets.SQL_SERVER_DEV }}" > .env.dev
            echo "DATABASE=${{ secrets.DATABASE_DEV }}" >> .env.dev
            echo "DBUID=${{ secrets.DBUID_DEV }}" >> .env.dev
            echo "DBPWD=${{ secrets.DBPWD_DEV }}" >> .env.dev
            echo "SQL_PORT=1401" >> .env.dev
            echo "APP_PORT=5001" >> .env.dev
            echo "FLASK_ENV=dev" >> .env.dev
      
      - name: Debug .env.dev File
        run: |
            echo "Contents of .env.dev:"
            cat .env.dev
    
      - name: Start Dev Environment with Docker Compose
        env:
          ENV_FILE: .env.dev
        run: |
          docker-compose -f docker-compose.yml --env-file ${ENV_FILE} up --build -d dev_sqlserver

      - name: Execute DB Scripts for Dev
        env:
          ENV_FILE: .env.dev
          SQL_SERVER: ${{ env.SQL_SERVER }}
          DATABASE: ${{ env.DATABASE }}
          DBUID: ${{ env.DBUID }}
          DBPWD: ${{ env.DBPWD }}
          SPRINT_FOLDER: ${{ env.SPRINT_FOLDER }}
        run: |
          docker exec -i dev_sqlserver /bin/bash -c "
            for file in /var/opt/sqlserver/db/${SPRINT_FOLDER}/Exec/*.sql; do
              SCRIPT_NAME=\$(basename \"\$file\")
              EXISTS=\$(/opt/mssql-tools/bin/sqlcmd -S $SQL_SERVER -U $DBUID -P $DBPWD -d $DATABASE -Q \"SELECT COUNT(1) FROM ExecutedScripts WHERE ScriptName = '\$SCRIPT_NAME'\" -h -1)
              if [ \"\$EXISTS\" -eq 0 ]; then
                echo \"Executing \$SCRIPT_NAME...\"
                /opt/mssql-tools/bin/sqlcmd -S $SQL_SERVER -U $DBUID -P $DBPWD -d $DATABASE -i \"\$file\"
                if [ \$? -eq 0 ]; then
                  /opt/mssql-tools/bin/sqlcmd -S $SQL_SERVER -U $DBUID -P $DBPWD -d $DATABASE -Q \"INSERT INTO ExecutedScripts (ScriptName, Status) VALUES ('\$SCRIPT_NAME', 'Success')\"
                else
                  /opt/mssql-tools/bin/sqlcmd -S $SQL_SERVER -U $DBUID -P $DBPWD -d $DATABASE -Q \"INSERT INTO ExecutedScripts (ScriptName, Status) VALUES ('\$SCRIPT_NAME', 'Failure')\"
                  exit 1
                fi
              else
                echo \"Skipping already executed script: \$SCRIPT_NAME\"
              fi
            done
          "

  cd_qa:
    name: Deploy to QA with Approval
    runs-on: ubuntu-latest
    needs: ci_dev
    if: github.ref == 'refs/heads/develop'
    environment:
      name: QA
      url: http://qa.sqlserver
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Extract Sprint Folder from Branch Name
        id: sprint
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          SPRINT_FOLDER=$(echo $BRANCH_NAME | sed 's/feature\///')
          echo "SPRINT_FOLDER=$SPRINT_FOLDER" >> $GITHUB_ENV

      - name: Generate .env.qa for Docker Compose
        run: |
            echo "SQL_SERVER=${{ secrets.SQL_SERVER_QA }}" > .env.qa
            echo "DATABASE=${{ secrets.DATABASE_QA }}" >> .env.qa
            echo "DBUID=${{ secrets.DBUID_QA }}" >> .env.qa
            echo "DBPWD=${{ secrets.DBPWD_QA }}" >> .env.qa
            echo "SQL_PORT=1402" >> .env.qa
            echo "APP_PORT=5002" >> .env.qa
            echo "FLASK_ENV=qa" >> .env.qa
      
      - name: Start QA Environment with Docker Compose
        env:
          ENV_FILE: .env.qa
        run: |
          docker-compose -f docker-compose.yml --env-file ${ENV_FILE} up --build -d qa_sqlserver

      - name: Execute DB Scripts for QA
        env:
          ENV_FILE: .env.qa
          SQL_SERVER: ${{ env.SQL_SERVER }}
          DATABASE: ${{ env.DATABASE }}
          DBUID: ${{ env.DBUID }}
          DBPWD: ${{ env.DBPWD }}
          SPRINT_FOLDER: ${{ env.SPRINT_FOLDER }}
        run: |
          docker exec -i qa_sqlserver /bin/bash -c "
            for file in /var/opt/sqlserver/db/${SPRINT_FOLDER}/Exec/*.sql; do
              SCRIPT_NAME=\$(basename \"\$file\")
              EXISTS=\$(/opt/mssql-tools/bin/sqlcmd -S $SQL_SERVER -U $DBUID -P $DBPWD -d $DATABASE -Q \"SELECT COUNT(1) FROM ExecutedScripts WHERE ScriptName = '\$SCRIPT_NAME'\" -h -1)
              if [ \"\$EXISTS\" -eq 0 ]; then
                echo \"Executing \$SCRIPT_NAME...\"
                /opt/mssql-tools/bin/sqlcmd -S $SQL_SERVER -U $DBUID -P $DBPWD -d $DATABASE -i \"\$file\"
                if [ \$? -eq 0 ]; then
                  /opt/mssql-tools/bin/sqlcmd -S $SQL_SERVER -U $DBUID -P $DBPWD -d $DATABASE -Q \"INSERT INTO ExecutedScripts (ScriptName, Status) VALUES ('\$SCRIPT_NAME', 'Success')\"
                else
                  /opt/mssql-tools/bin/sqlcmd -S $SQL_SERVER -U $DBUID -P $DBPWD -d $DATABASE -Q \"INSERT INTO ExecutedScripts (ScriptName, Status) VALUES ('\$SCRIPT_NAME', 'Failure')\"
                  exit 1
                fi
              else
                echo \"Skipping already executed script: \$SCRIPT_NAME\"
              fi
            done
          "

      - name: Approval Required for QA Deployment
        uses: hmarr/auto-approve-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
