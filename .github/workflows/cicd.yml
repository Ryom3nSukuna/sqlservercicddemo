name: CI/CD Pipeline for SQL Server
# Service restarted
on:
  push:
    branches:
      - develop
      - feature/*
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # For manual rollback triggers ad

jobs:
  ci_dev:
    name: Continuous Integration for Dev
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/heads/feature/')
    environment: dev
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Extract Sprint Folder from Branch Name
        id: sprint
        shell: powershell
        run: |
            $BRANCH_NAME = ($env:GITHUB_REF -split "/")[-1]
            Write-Host "Branch Name: $BRANCH_NAME"
            $SPRINT_FOLDER = $BRANCH_NAME -replace '^feature/', ''
            Write-Host "Sprint Folder: $SPRINT_FOLDER"
            echo "SPRINT_FOLDER=$SPRINT_FOLDER" >> $env:GITHUB_ENV

      
      - name: Generate .env.dev File
        run: |
            echo SQL_SERVER=${{ secrets.SQL_SERVER_DEV }} > .env.dev
            echo DATABASE=${{ secrets.DATABASE_DEV }} >> .env.dev
            echo DBUID=${{ secrets.DBUID_DEV }} >> .env.dev
            echo DBPWD=${{ secrets.DBPWD_DEV }} >> .env.dev
            echo SQL_PORT=1401 >> .env.dev
            echo APP_PORT=5001 >> .env.dev
            echo FLASK_ENV=dev >> .env.dev
            echo SPRINT_FOLDER=${{ env.SPRINT_FOLDER }} >> .env.dev
        shell: cmd
      
      - name: Debug Secrets
        run: |
            echo SQL_SERVER_DEV=${{ secrets.SQL_SERVER_DEV }}
            echo DATABASE_DEV=${{ secrets.DATABASE_DEV }}
            echo DBUID_DEV=${{ secrets.DBUID_DEV }}
            echo DBPWD_DEV=${{ secrets.DBPWD_DEV }}
        shell: cmd
      
      - name: Verify Secret Access
        env:
            SQL_SERVER_DEV: ${{ secrets.SQL_SERVER_DEV }}
        run: |
            if ($env:SQL_SERVER_DEV) {
            Write-Output "Secret is set and has length: $($env:SQL_SERVER_DEV.Length)"
            } else {
            Write-Output "Secret is not set."
            }
        
      - name: Debug .env.dev File Path
        run: |
            $ENV_FILE = ".env.dev"
            Write-Output "ENV_FILE=$ENV_FILE"
            if (Test-Path $ENV_FILE) {
            Write-Output "ENV_FILE exists and is accessible."
            } else {
            Write-Output "ENV_FILE is missing or inaccessible."
            }
        shell: powershell 

      - name: Test Docker Access
        run: |
            docker ps
            docker info
        shell: cmd # fixed runner let's see
      
      - name: Debug .env.dev File
        run: |
            type .env.dev
        shell: cmd
      
      - name: Start Dev Environment with Docker Compose
        env:
            ENV_FILE: .env.dev
        run: |
            echo Using ENV_FILE=%ENV_FILE%
            docker-compose -f docker-compose.yml --env-file %ENV_FILE% -p dev up --build -d
        shell: cmd 

  cd_qa:
    name: Deploy to QA with Approval
    runs-on: self-hosted
    if: github.ref == 'refs/heads/develop'  # Still ensures it runs only on 'develop'
    environment: qa
    steps:
    
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
            fetch-depth: 1  # Ensures only the latest commit is fetched

      - name: Mark Repository as Safe
        run: git config --global --add safe.directory C:/actions-runner/_work/sqlservercicddemo/sqlservercicddemo
      
      - name: Extract Sprint Folder from Commit Message
        id: sprint
        shell: powershell
        run: |
            Write-Host "Extracting Sprint Folder from the Commit Message..."
            # Get the latest commit message
            $COMMIT_MSG = git log -1 --pretty=%B
            Write-Host "Commit Message: $COMMIT_MSG"
            # Check if the commit message matches the expected format
            if ($COMMIT_MSG -match "feature\/ITBMSPR-\d{5}") {
                # Extract the sprint folder name
                $SPRINT_FOLDER = ($Matches[0] -replace "feature\/", "")
                Write-Host "Sprint Folder: $SPRINT_FOLDER"
                # Export it for subsequent steps
                echo "SPRINT_FOLDER=$SPRINT_FOLDER" >> $env:GITHUB_ENV
            } else {
                throw "Error: Commit message does not match the expected format 'feature/ITBMSPR-XXXXX'."
            }
      
      - name: Generate .env.qa File
        run: |
            echo SQL_SERVER=${{ secrets.SQL_SERVER_QA }} > .env.qa
            echo DATABASE=${{ secrets.DATABASE_QA }} >> .env.qa
            echo DBUID=${{ secrets.DBUID_QA }} >> .env.qa
            echo DBPWD=${{ secrets.DBPWD_QA }} >> .env.qa
            echo SQL_PORT=1401 >> .env.qa
            echo APP_PORT=5001 >> .env.qa
            echo FLASK_ENV=qa >> .env.qa
            echo SPRINT_FOLDER=${{ env.SPRINT_FOLDER }} >> .env.qa
        shell: cmd
      
      - name: Debug Secrets
        run: |
            echo SQL_SERVER_DEV=${{ secrets.SQL_SERVER_QA }}
            echo DATABASE_DEV=${{ secrets.DATABASE_QA }}
            echo DBUID_DEV=${{ secrets.DBUID_QA }}
            echo DBPWD_DEV=${{ secrets.DBPWD_QA }}
        shell: cmd
      
      - name: Verify Secret Access
        env:
            SQL_SERVER_DEV: ${{ secrets.SQL_SERVER_QA }}
        run: |
            if ($env:SQL_SERVER_QA) {
            Write-Output "Secret is set and has length: $($env:SQL_SERVER_QA.Length)"
            } else {
            Write-Output "Secret is not set."
            }
        
      - name: Debug .env.qa File Path
        run: |
            $ENV_FILE = ".env.qa"
            Write-Output "ENV_FILE=$ENV_FILE"
            if (Test-Path $ENV_FILE) {
            Write-Output "ENV_FILE exists and is accessible."
            } else {
            Write-Output "ENV_FILE is missing or inaccessible."
            }
        shell: powershell 

      - name: Test Docker Access
        run: |
            docker ps
            docker info
        shell: cmd # fixed runner let's see
      
      - name: Debug .env.qa File
        run: |
            type .env.qa
        shell: cmd
      
      - name: Start QA Environment with Docker Compose
        env:
            ENV_FILE: .env.qa
        run: |
            echo Using ENV_FILE=%ENV_FILE%
            docker-compose -f docker-compose.yml --env-file %ENV_FILE% -p qa up --build -d
        shell: cmd 
